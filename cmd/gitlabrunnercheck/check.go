package main

import (
	"fmt"
	log "github.com/sirupsen/logrus"
	gitlab "github.com/xanzy/go-gitlab"
	"net/http"
	"os"
	"strings"
	"time"
)

func main() {
	gitlabURL := os.Getenv("GITLAB_URL")
	token := os.Getenv("GITLAB_TOKEN")
	pause := os.Getenv("PAUSE")
	pauseDuration, err := time.ParseDuration(pause)
	if err != nil {
		log.WithError(err).WithField("pause", pause).Error("Could not parse pause string, using default of 10m")
		pause = "10m"
		pauseDuration, err = time.ParseDuration(pause)
		if err != nil {
			panic(err)
		}
	}
	threshold := os.Getenv("THRESHOLD_BEFORE_ALERT")
	if gitlabURL == "" || token == "" {
		panic("You must set the gitlab url and token")
	}
	thresholdInt, err := time.ParseDuration(threshold)
	if err != nil {
		log.WithError(err).WithField("threshold", threshold).Error("Could not parse threshold string, using default of 20m")
		threshold = "20m"
		thresholdInt, err = time.ParseDuration(threshold)
		if err != nil {
			panic(err)
		}
	}
	alertmanagerUrl := os.Getenv("ALERTMANAGER_URL")
	alertmanagerApiUrl := fmt.Sprintf("%s/api/v1/alerts", alertmanagerUrl)
	alertmanagerUsername := os.Getenv("ALERTMANAGER_USERNAME")
	alertmanagerPassword := os.Getenv("ALERTMANAGER_PASSWORD")
	for true {
		CheckAllRunners(gitlabURL, token, alertmanagerUsername, alertmanagerPassword, alertmanagerApiUrl, threshold, thresholdInt)
		time.Sleep(pauseDuration)
	}
}

func CheckAllRunners(gitlabURL, token, alertmanagerUsername, alertmanagerPassword, alertmanagerApiUrl, threshold string, thresholdInt time.Duration) {
	git := gitlab.NewClient(nil, token)
	git.SetBaseURL(fmt.Sprintf("%s/api/v4", gitlabURL))
	var scope *string
	scopeStr := "active"
	scope = &scopeStr
	runners, _, err := git.Runners.ListAllRunners(&gitlab.ListRunnersOptions{Scope: scope})
	if err != nil {
		panic(err)
	}
	for _, runner := range runners {
		detail, _, err := git.Runners.GetRunnerDetails(runner.ID)
		if err != nil {
			log.WithError(err).WithField("Runner_id", detail.ID).Error("Could not get detail for runner")
		}
		now := time.Now()

		if now.Sub(*detail.ContactedAt) > thresholdInt {
			log.WithFields(log.Fields{
				"name":         detail.Description,
				"runner_id":    detail.ID,
				"contacted_at": *detail.ContactedAt,
				"threshold":    threshold,
				"difference":   now.Sub(*detail.ContactedAt).String(),
			}).Warning("Runner has not contacted gitlab within the threshold. Warning alertmanager which will warn slack")
			// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

			body := strings.NewReader(fmt.Sprintf(`[{ 
				"status": "firing",
				"labels": {
					"alertname": "GitlabRunnerNotCommunicating",
					"service": "%s",
					"severity":"warning"
				},
				"annotations": {
					"summary": "Gitlab runner named %s - has not spoken to gitlab for %s, above the set threshold of %s. This probably means it's wedged."
				},
				"generatorURL": "https://gitlab.dotmesh.com/admin/runners"
			}]`, detail.Description, detail.Description, now.Sub(*detail.ContactedAt).String(), threshold))
			req, err := http.NewRequest("POST", alertmanagerApiUrl, body)
			if err != nil {
				// handle err
				log.WithField("url", alertmanagerApiUrl).WithError(err).Error("Could not create http request")
			}
			if alertmanagerUsername != "" && alertmanagerPassword != "" {
				req.SetBasicAuth(alertmanagerUsername, alertmanagerPassword)
			}
			req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

			resp, err := http.DefaultClient.Do(req)
			if err != nil {
				// handle err
				log.WithField("url", alertmanagerApiUrl).WithError(err).Error("Could not communicate with alertmanager")
			} else {
				log.Info("Alert sent...")
				defer resp.Body.Close()
			}
		} else {
			log.WithFields(log.Fields{
				"runner_name":          detail.Description,
				"runner_id":            detail.ID,
				"time_since_contacted": now.Sub(*detail.ContactedAt).String(),
			}).Info("Runner is fine, alertmanager will kill the alert once time has passed.")
		}
	}
}
